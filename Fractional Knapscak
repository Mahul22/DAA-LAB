#include <stdio.h>


struct Item {
    int weight;
    int value;
};


int compareItems(const void *a, const void *b) {
    double ratioA = ((double)(((struct Item *)a)->value) / ((struct Item *)a)->weight);
    double ratioB = ((double)(((struct Item *)b)->value) / ((struct Item *)b)->weight);
    return (ratioB - ratioA); // Sort in non-increasing order of value-to-weight ratio
}


void fractionalKnapsack(int capacity, struct Item items[], int n) {
    
    qsort(items, n, sizeof(struct Item), compareItems);


    double totalValue = 0.0;
    int currentWeight = 0;

    
    for (int i = 0; i < n; i++) {
        
        if (currentWeight + items[i].weight <= capacity) {
            currentWeight += items[i].weight;
            totalValue += items[i].value;
        } else {
           
            double fraction = (double)(capacity - currentWeight) / items[i].weight;
            totalValue += fraction * items[i].value;
            break;
        }
    }

   
    printf("Maximum value in knapsack = %.2lf\n", totalValue);
}

int main() {
    
    int capacity = 50;
    struct Item items[] = {{10, 60}, {20, 100}, {30, 120}};
    int n = sizeof(items) / sizeof(items[0]);

    fractionalKnapsack(capacity, items, n);

    return 0;
}
